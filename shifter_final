#include <LiquidCrystal_I2C.h>

#define DEBOUNCE_DELAY 30 // 디바운스 지연 시간 조정

// --- 주변 장치 및 핀 설정 ---
LiquidCrystal_I2C lcd(0x27, 16, 2);

// 출력 핀
const byte fuelCutPin       = 5;
const byte shiftUpPin       = 6;
const byte shiftDownPin     = 7;
const byte l298n2_IN2       = 3;
const byte l298n2_IN4       = 4;
const byte wingMotorPinA    = 13; // 비활성화
const byte wingMotorPinB    = 13;
const byte wingMotorEN      = 13;

// 입력 핀 (버튼)
const byte gearResetButtonPin     = 8;
const byte shiftUpButtonPin       = 9;
const byte shiftUpIdleButtonPin   = 10;
const byte shiftDownButtonPin     = 11;
const byte shiftDownIdleButtonPin = 12;

// --- 상태 머신 정의 ---
enum ShiftState {
  S_IDLE,
  S_UP_SHIFT_FUEL_CUT,
  S_UP_SHIFT_CYLINDER_ACTIVE,
  S_DOWN_SHIFT_FUEL_CUT,
  S_IDLE_UP_SHIFT_ACTIVE,
  S_IDLE_DOWN_SHIFT_ACTIVE
};
ShiftState currentShiftState = S_IDLE;

// --- Button 구조체 및 상태 변수 ---
struct Button {
  const byte pin;
  bool lastReading;
  bool debouncedState;
  unsigned long lastDebounceTime;

  Button(byte p) : pin(p), lastReading(HIGH), debouncedState(HIGH), lastDebounceTime(0) {}
};

Button gearResetButton(gearResetButtonPin);
Button shiftUpButton(shiftUpButtonPin);
Button shiftUpIdleButton(shiftUpIdleButtonPin);
Button shiftDownButton(shiftDownButtonPin);
Button shiftDownIdleButton(shiftDownIdleButtonPin);

// --- 전역 변수 ---
int gearIdx = 1;

unsigned int fuelCutTime    = 0;
unsigned int cylinderTime   = 0;
unsigned int cylinderDelay  = 0;

unsigned long stateChangeTime     = 0;
unsigned long lastLcdUpdateTime   = 0;
const unsigned int updateLCDInterval = 500;

// 리어윙 관련
int speedValue       = 0;
int speedThreshold   = 60;
unsigned long wingMoveStartTime = 0;
const unsigned long wingMoveDuration = 1000;
bool wingIsUp    = false;
bool wingMoving  = false;
bool wingDirectionUp = false;

// 함수 선언
void updateShiftController();
bool wasPressed(Button &btn);

void setup() {
  Serial.begin(9600);

  // LCD 초기화
  lcd.begin();
  lcd.backlight();

  // 출력 핀 설정
  pinMode(fuelCutPin, OUTPUT);
  digitalWrite(fuelCutPin, HIGH);
  pinMode(shiftUpPin, OUTPUT);
  pinMode(shiftDownPin, OUTPUT);
  pinMode(l298n2_IN2, OUTPUT);
  pinMode(l298n2_IN4, OUTPUT);
  pinMode(wingMotorPinA, OUTPUT);
  pinMode(wingMotorPinB, OUTPUT);
  pinMode(wingMotorEN, OUTPUT);
  digitalWrite(wingMotorEN, HIGH);

  // 입력 핀(풀업)
  pinMode(gearResetButton.pin,     INPUT_PULLUP);
  pinMode(shiftUpButton.pin,       INPUT_PULLUP);
  pinMode(shiftUpIdleButton.pin,   INPUT_PULLUP);
  pinMode(shiftDownButton.pin,     INPUT_PULLUP);
  pinMode(shiftDownIdleButton.pin, INPUT_PULLUP);

  stopCylinders();
}

void loop() {
  unsigned long currentTime = millis();

  // 아날로그 읽어서 0~150으로 매핑
  fuelCutTime   = map(analogRead(A0), 0, 1023, 0, 150);
  cylinderTime  = map(analogRead(A2), 0, 1023, 0, 150);
  cylinderDelay = map(analogRead(A1), 0, 1023, 0, 150);

  // 시리얼 입력(속도)
  if (Serial.available() > 0) {
    speedValue = Serial.parseInt();
    controlRearWing(speedValue);
    Serial.print("Input Speed: ");
    Serial.println(speedValue);
  }

  // 기어 리셋
  if (wasPressed(gearResetButton)) {
    gearIdx = 1;
    Serial.println("Gear Reset → 1단");
  }

  // 상태 머신
  updateShiftController();

  // 리어윙
  updateWingMotor();

  // LCD
  if (currentTime - lastLcdUpdateTime >= updateLCDInterval) {
    updateLCD();
    lastLcdUpdateTime = currentTime;
  }
}

void updateShiftController() {
  unsigned long currentTime = millis();

  switch (currentShiftState) {
    case S_IDLE:
      // 쉬프트업: 지연 경로
      if (wasPressed(shiftUpButton)) {
        Serial.println("ShiftUp: Fuel Cut 시작");
        digitalWrite(fuelCutPin, LOW);
        stopCylinders();
        stateChangeTime = currentTime;
        currentShiftState = S_UP_SHIFT_FUEL_CUT;
      }
      // 쉬프트다운: 지연 경로
      else if (wasPressed(shiftDownButton)) {
        Serial.println("ShiftDown: Fuel Cut 시작");
        digitalWrite(fuelCutPin, LOW);
        shiftCylinderDown();
        stateChangeTime = currentTime;
        currentShiftState = S_DOWN_SHIFT_FUEL_CUT;
      }
      // Idle 쉬프트업: 즉시 경로
      else if (wasPressed(shiftUpIdleButton)) {
        Serial.println("Idle ShiftUp: 실린더 UP");
        shiftCylinderUp();
        stateChangeTime = currentTime;
        currentShiftState = S_IDLE_UP_SHIFT_ACTIVE;
      }
      // Idle 쉬프트다운: 즉시 경로
      else if (wasPressed(shiftDownIdleButton)) {
        Serial.println("Idle ShiftDown: 실린더 DOWN");
        shiftCylinderDown();
        stateChangeTime = currentTime;
        currentShiftState = S_IDLE_DOWN_SHIFT_ACTIVE;
      }
      break;

    case S_UP_SHIFT_FUEL_CUT:
      if (currentTime - stateChangeTime >= cylinderDelay) {
        Serial.println("ShiftUp: 실린더 UP");
        shiftCylinderUp();
        stateChangeTime = currentTime;
        currentShiftState = S_UP_SHIFT_CYLINDER_ACTIVE;
      }
      break;

    case S_UP_SHIFT_CYLINDER_ACTIVE:
      if (currentTime - stateChangeTime >= cylinderTime) {
        Serial.println("ShiftUp: 완료 → 기어 증가");
        stopCylinders();
        digitalWrite(fuelCutPin, HIGH);
        gearIdx++;                       // 상한 체크 제거
        currentShiftState = S_IDLE;
      }
      break;

    case S_DOWN_SHIFT_FUEL_CUT:
      if (currentTime - stateChangeTime >= cylinderTime) {
        Serial.println("ShiftDown: 완료 → 기어 감소");
        stopCylinders();
        digitalWrite(fuelCutPin, HIGH);
        gearIdx--;                       // 하한 체크 제거
        currentShiftState = S_IDLE;
      }
      break;

    case S_IDLE_UP_SHIFT_ACTIVE:
      if (currentTime - stateChangeTime >= cylinderTime) {
        Serial.println("Idle ShiftUp: 완료 → 기어 증가");
        stopCylinders();
        gearIdx++;                       // 상한 체크 제거
        currentShiftState = S_IDLE;
      }
      break;

    case S_IDLE_DOWN_SHIFT_ACTIVE:
      if (currentTime - stateChangeTime >= cylinderTime) {
        Serial.println("Idle ShiftDown: 완료 → 기어 감소");
        stopCylinders();
        gearIdx--;                       // 하한 체크 제거
        currentShiftState = S_IDLE;
      }
      break;
  }
}

// Falling Edge 감지 (풀업 사용)
bool wasPressed(Button &btn) {
  bool oldState = btn.debouncedState;
  bool reading  = digitalRead(btn.pin);

  if (reading != btn.lastReading) {
    btn.lastDebounceTime = millis();
  }
  if (millis() - btn.lastDebounceTime > DEBOUNCE_DELAY) {
    btn.debouncedState = reading;
  }
  btn.lastReading = reading;

  // HIGH → LOW 전환 시 true
  return (oldState == HIGH && btn.debouncedState == LOW);
}

void updateLCD() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Fuel:");
  lcd.print(fuelCutTime);
  lcd.setCursor(0, 1);
  lcd.print("T:");
  lcd.print(cylinderTime);
  lcd.print(" D:");
  lcd.print(cylinderDelay);
  lcd.print(" G:");
  lcd.print(gearIdx);
}

void controlRearWing(int spd) {
  if (wingMoving) return;
  if (spd >= speedThreshold && !wingIsUp) {
    digitalWrite(wingMotorPinA, HIGH);
    digitalWrite(wingMotorPinB, LOW);
    wingMoveStartTime = millis();
    wingMoving = true;
    wingDirectionUp = true;
  } else if (spd < speedThreshold && wingIsUp) {
    digitalWrite(wingMotorPinA, LOW);
    digitalWrite(wingMotorPinB, HIGH);
    wingMoveStartTime = millis();
    wingMoving = true;
    wingDirectionUp = false;
  }
}

void updateWingMotor() {
  if (wingMoving && millis() - wingMoveStartTime >= wingMoveDuration) {
    digitalWrite(wingMotorPinA, LOW);
    digitalWrite(wingMotorPinB, LOW);
    wingMoving = false;
    wingIsUp = wingDirectionUp;
  }
}

void shiftCylinderUp() {
  digitalWrite(shiftUpPin, HIGH);
  digitalWrite(l298n2_IN2, LOW);
  Serial.println("실린더 UP");
}

void shiftCylinderDown() {
  digitalWrite(shiftDownPin, HIGH);
  digitalWrite(l298n2_IN4, LOW);
  Serial.println("실린더 DOWN");
}

void stopCylinders() {
  digitalWrite(shiftUpPin, LOW);
  digitalWrite(shiftDownPin, LOW);
  digitalWrite(l298n2_IN2, LOW);
  digitalWrite(l298n2_IN4, LOW);
  Serial.println("실린더 STOP");
}
